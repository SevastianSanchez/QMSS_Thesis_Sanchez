# SPI & SCI HISTOGRAMS: side-by-side layout
png("figures/spi_sci_hist.png", width = 8, height = 4, unit = "in", res = 300) #SPI & SCI Side By Side
par(mfrow = c(1, 2))
# SPI histogram
hist(merged$spi_comp, main = "Statistical Performance Index (2016-2023)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
# SCI histogram
hist(merged$sci_overall, main = "Statistical Capacity Index (2004-2020)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
par(mfrow = c(1, 1)) #side by side
dev.off()
# SPI & SCI HISTOGRAMS: side-by-side layout
png("figures/spi_sci_hist.png", width = 9, height = 5, unit = "in", res = 300) #SPI & SCI Side By Side
par(mfrow = c(1, 2))
# SPI histogram
hist(merged$spi_comp, main = "Statistical Performance Index (2016-2023)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
# SCI histogram
hist(merged$sci_overall, main = "Statistical Capacity Index (2004-2020)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
par(mfrow = c(1, 1)) #side by side
dev.off()
# SDG histogram
png("figures/sdg_hist.png") #Saving to figures folder
sdg_hist <- hist(merged$sdg_overall, main = "Sustainable Development Goals (2004-2023)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
dev.off()
png("figures/sdg_hist.png", width = 5, height = 4, unit = "in", res = 300) #Saving to figures folder
sdg_hist <- hist(merged$sdg_overall, main = "Sustainable Development Goals (2004-2023)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
dev.off()
boxplot(spi_comp ~ regime_type_2, data = merged,
main = "SPI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
# SCI Distribution by regime type (only considers lower income / developing countries)
boxplot(sci_overall ~ regime_type_2, data = merged,
main = "SCI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
#SPI & SCI BOX PLOTS: SIDE BY SIDE
png("figure/spi_sci_boxplots.png", width = 9, height = 5, units = "in", res = 300)
par(mfrow = c(1, 2))
# SPI Distribution by regime type
boxplot(spi_comp ~ regime_type_2, data = merged,
main = "SPI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
# SCI Distribution by regime type (only considers lower income / developing countries)
boxplot(sci_overall ~ regime_type_2, data = merged,
main = "SCI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
#SPI & SCI BOX PLOTS: SIDE BY SIDE
png("figures/spi_sci_boxplots.png", width = 9, height = 5, units = "in", res = 300)
par(mfrow = c(1, 2))
# SPI Distribution by regime type
boxplot(spi_comp ~ regime_type_2, data = merged,
main = "SPI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
# SCI Distribution by regime type (only considers lower income / developing countries)
boxplot(sci_overall ~ regime_type_2, data = merged,
main = "SCI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
# SDG Box plot
png("figures/sdg_boxplots.png", width = 5, height = 4, units = "in", res = 300)
par(mfrow = c(1, 2))
boxplot(sdg_overall ~ regime_type_2, data = merged,
main = "SDG Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
#SPI & SCI BOX PLOTS: SIDE BY SIDE
png("figures/spi_sci_boxplots.png", width = 9, height = 5, units = "in", res = 300)
par(mfrow = c(1, 2))
# SPI Distribution by regime type
boxplot(spi_comp ~ regime_type_2, data = merged,
main = "SPI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
# SCI Distribution by regime type (only considers lower income / developing countries)
boxplot(sci_overall ~ regime_type_2, data = merged,
main = "SCI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
# SDG Box plot
png("figures/sdg_boxplots.png", width = 5, height = 4, units = "in", res = 300)
par(mfrow = c(1, 2))
boxplot(sdg_overall ~ regime_type_2, data = merged,
main = "SDG Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
#SPI & SCI BOX PLOTS: SIDE BY SIDE
png("figures/spi_sci_boxplots.png", width = 9, height = 5, units = "in", res = 300)
par(mfrow = c(1, 2))
# SPI Distribution by regime type
boxplot(spi_comp ~ regime_type_2, data = merged,
main = "SPI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
# SCI Distribution by regime type (only considers lower income / developing countries)
boxplot(sci_overall ~ regime_type_2, data = merged,
main = "SCI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
# SDG Box plot
png("figures/sdg_boxplots.png", width = 5, height = 4, units = "in", res = 300)
par(mfrow = c(1, 2))
boxplot(sdg_overall ~ regime_type_2, data = merged,
main = "SDG Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
#SPI & SCI BOX PLOTS: SIDE BY SIDE
png("figures/spi_sci_boxplots.png", width = 9, height = 5, units = "in", res = 300)
par(mfrow = c(1, 2))
# SPI Distribution by regime type
boxplot(spi_comp ~ regime_type_2, data = merged,
main = "SPI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
# SCI Distribution by regime type (only considers lower income / developing countries)
boxplot(sci_overall ~ regime_type_2, data = merged,
main = "SCI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
# SDG Box plot
png("figures/sdg_boxplots.png", width = 5, height = 4, units = "in", res = 300)
boxplot(sdg_overall ~ regime_type_2, data = merged,
main = "SDG Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
dev.off()
#SPI & SCI BOX PLOTS: SIDE BY SIDE
png("figures/spi_sci_boxplots.png", width = 9, height = 5, units = "in", res = 300)
par(mfrow = c(1, 2))
# SPI Distribution by regime type
boxplot(spi_comp ~ regime_type_2, data = merged,
main = "SPI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
# SCI Distribution by regime type (only considers lower income / developing countries)
boxplot(sci_overall ~ regime_type_2, data = merged,
main = "SCI Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
par(mfrow = c(1, 1)) #side by side
dev.off()
# SDG Box plot
png("figures/sdg_boxplots.png", width = 5, height = 4, units = "in", res = 300)
boxplot(sdg_overall ~ regime_type_2, data = merged,
main = "SDG Distribution by Regime Type",
xlab = "Regime Type",
ylab = "Composite Score (1-100)",
col = c("salmon", "skyblue"))
legend("bottomright",                      # Position of the legend
legend = c("Democracy", "Autocracy"),  # Group names
fill = c("skyblue", "salmon"),        # Colors matching the boxplot
border = "black",                     # Box border color (optional)
bty = "n")
dev.off()
# SPI & SCI HISTOGRAMS: side-by-side layout
png("figures/spi_sci_hist.png", width = 9, height = 5, unit = "in", res = 300) #SPI & SCI Side By Side
par(mfrow = c(1, 2))
# SPI histogram
hist(merged$spi_comp, main = "Statistical Performance Index (2016-2023)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
# SCI histogram
hist(merged$sci_overall, main = "Statistical Capacity Index (2004-2020)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
par(mfrow = c(1, 1)) #side by side
dev.off()
# SDG histogram
png("figures/sdg_hist.png", width = 5, height = 4, unit = "in", res = 300) #Saving to figures folder
sdg_hist <- hist(merged$sdg_overall, main = "Sustainable Development Goals (2004-2023)",
xlab = "Composite Score (0-100)",
ylab = "Frequency (country-years)")
dev.off()
#New Vars - Quantile breaks
quant_breaks_sdg <- quantile(merged$sdg_overall, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
quant_breaks_spi <- quantile(merged$spi_comp, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
quant_breaks_sci <- quantile(merged$sci_overall, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
# Inputting SDG quartiles in main DF
merged$sdg_quant_bins <- cut(merged$sdg_overall,
breaks = quant_breaks_sdg,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
#SDG IQR Summary Table
sdg_summary <- merged %>%
group_by(regime_type_2, sdg_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
sdg_wide_table <- sdg_summary %>%
pivot_wider(names_from = sdg_quant_bins, values_from = count, values_fill = 0)
# Inputting SPI quartiles in main DF
merged$spi_quant_bins <- cut(merged$spi_comp,
breaks = quant_breaks_spi,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
#SPI IQR Summary Table
spi_summary <- merged %>%
group_by(regime_type_2, spi_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
spi_wide_table <- spi_summary %>%
pivot_wider(names_from = spi_quant_bins, values_from = count, values_fill = 0)
# Inputting SCI quartiles in main DF
merged$sci_quant_bins <- cut(merged$sci_overall,
breaks = quant_breaks_sci,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
# SCI IQR Summary Table
sci_summary <- merged %>%
group_by(regime_type_2, sci_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
sci_wide_table <- sci_summary %>%
pivot_wider(names_from = sci_quant_bins, values_from = count, values_fill = 0)
#Summary tables by score: Min, 1st Qu. Median, Mean, 3rd Qu., Max, NA's
summary(merged$sdg_overall)
summary(merged$spi_comp)
summary(merged$sci_overall)
summary(merged$di_score)
#write tables as CSV to directory
# STACKED BAR PLOTS LATER
# SCI IQR Summary Table
sci_summary <- merged %>%
group_by(regime_type_2, sci_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
sci_wide_table <- sci_summary %>%
pivot_wider(names_from = sci_quant_bins, values_from = count, values_fill = 0)
quant_breaks_sdg <- quantile(merged$sdg_overall, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
quant_breaks_spi <- quantile(merged$spi_comp, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
quant_breaks_sci <- quantile(merged$sci_overall, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
# Inputting SDG quartiles in main DF
merged$sdg_quant_bins <- cut(merged$sdg_overall,
breaks = quant_breaks_sdg,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
#SDG IQR Summary Table
sdg_summary <- merged %>%
group_by(regime_type_2, sdg_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
sdg_wide_table <- sdg_summary %>%
pivot_wider(names_from = sdg_quant_bins, values_from = count, values_fill = 0)
# Inputting SDG quartiles in main DF
merged$sdg_quant_bins <- cut(merged$sdg_overall,
breaks = quant_breaks_sdg,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
#SDG IQR Summary Table
sdg_summary <- merged %>%
group_by(regime_type_2, sdg_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
sdg_wide_table <- sdg_summary %>%
pivot_wider(names_from = sdg_quant_bins, values_from = count, values_fill = 0)
# Inputting SPI quartiles in main DF
merged$spi_quant_bins <- cut(merged$spi_comp,
breaks = quant_breaks_spi,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
#SPI IQR Summary Table
spi_summary <- merged %>%
group_by(regime_type_2, spi_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
spi_wide_table <- spi_summary %>%
pivot_wider(names_from = spi_quant_bins, values_from = count, values_fill = 0)
# Inputting SCI quartiles in main DF
merged$sci_quant_bins <- cut(merged$sci_overall,
breaks = quant_breaks_sci,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
# Inputting SDG quartiles in main DF
merged$sdg_quant_bins <- cut(merged$sdg_overall,
breaks = quant_breaks_sdg,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
#SDG IQR Summary Table
sdg_summary <- merged %>%
group_by(regime_type_2, sdg_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
sdg_wide_table <- sdg_summary %>%
pivot_wider(names_from = sdg_quant_bins, values_from = count, values_fill = 0)
# Inputting SPI quartiles in main DF
merged$spi_quant_bins <- cut(merged$spi_comp,
breaks = quant_breaks_spi,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
#SPI IQR Summary Table
spi_summary <- merged %>%
group_by(regime_type_2, spi_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
spi_wide_table <- spi_summary %>%
pivot_wider(names_from = spi_quant_bins, values_from = count, values_fill = 0)
# Inputting SCI quartiles in main DF
merged$sci_quant_bins <- cut(merged$sci_overall,
breaks = quant_breaks_sci,
include.lowest = TRUE,
labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
# SCI IQR Summary Table
sci_summary <- merged %>%
group_by(regime_type_2, sci_quant_bins) %>%
summarise(count = n(), .groups = "drop")
# Pivot to wide format
sci_wide_table <- sci_summary %>%
pivot_wider(names_from = sci_quant_bins, values_from = count, values_fill = 0)
View(sci_summary)
View(sci_wide_table)
View(sdg_wide_table)
#correlation coefficients (r-squared), WITHOUT control variables
#x-var 1 = spi
correlation_sdg_spi <- cor(merged$sdg_overall, merged$spi_comp, use = "complete.obs")^2
#x-var 2 = sci
correlation_sdg_sci <- cor(merged$sdg_overall, merged$sci_overall, use = "complete.obs")^2
#x-var 3 = di
correlation_sdg_di <- cor(merged$sdg_overall, merged$di_score, use = "complete.obs")^2
# pasting result
string_corcoef <- "Correlation coefficient:"
paste(string_corcoef, correlation_sdg_spi, "(SPI)", correlation_sdg_sci, "(SCI)", correlation_sdg_di, "(DI)")
ols_spi_naive <- lm(sdg_overall ~ spi_comp, data = merged)
summary(ols_spi_naive)
ols_sci_naive <- lm(sdg_overall ~ sci_overall, data = merged)
summary(ols_sci_naive)
# 3. Multiple Regression with both SPI and SCI
ols_multiple_naive <- lm(sdg_overall ~ spi_comp + sci_overall, data = merged)
summary(ols_multiple_naive)
# 1. OLS for SPI and SDG - Overall
ols_spi <- lm(sdg_overall ~ spi_comp + log_gdppc + population + di_score + gini + year_fct, data = merged)
#summary(ols_spi)
# Robust SEs
coeftest(ols_spi, vcov = vcovHC(ols_spi, type = "HC1"))
ols_spi <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + population + gini + year_fct, data = merged)
#summary(ols_spi)
# Robust SEs
coeftest(ols_spi, vcov = vcovHC(ols_spi, type = "HC1"))
# 1. OLS for SPI and SDG - Overall
ols_spi <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + population + gini + year_fct, data = merged)
summary(ols_spi)
# Robust SEs
coeftest(ols_spi, vcov = vcovHC(ols_spi, type = "HC1"))
ols_spi <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + population + gini + year_fct, data = merged)
summary(ols_spi)
ols_sci <- lm(sdg_overall ~ sci_overall + log_gdppc + population + di_score + gini + year_fct, data = merged)
summary(ols_sci)
# Robust SEs
coeftest(ols_sci, vcov = vcovHC(ols_sci, type = "HC1"))
ols_spi <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + population + gini + year_fct, data = merged)
summary(ols_spi)
# Robust SEs
coeftest(ols_spi, vcov = vcovHC(ols_spi, type = "HC1"))
ols_sci <- lm(sdg_overall ~ sci_overall + log_gdppc + population + di_score + gini + year_fct, data = merged)
summary(ols_sci)
# Robust SEs
coeftest(ols_sci, vcov = vcovHC(ols_sci, type = "HC1"))
ols_multiple <- lm(sdg_overall ~ spi_comp + sci_overall + log_gdppc + population + di_score + gini + year_fct, data = merged)
summary(ols_multiple)
# Robust SEs
coeftest(ols_multiple, vcov = vcovHC(ols_multiple, type = "HC1"))
ols_spi <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + population + gini + year_fct, data = merged)
summary(ols_spi)
# Robust SEs
coeftest(ols_spi, vcov = vcovHC(ols_spi, type = "HC1"))
# 2. OLS for SCI and SDG - Overall
ols_sci <- lm(sdg_overall ~ sci_overall + log_gdppc + population + di_score + gini + year_fct, data = merged)
summary(ols_sci)
# Robust SEs
coeftest(ols_sci, vcov = vcovHC(ols_sci, type = "HC1"))
ols_multiple <- lm(sdg_overall ~ spi_comp + sci_overall + log_gdppc + population + di_score + gini + year_fct, data = merged)
summary(ols_multiple)
# Robust SEs
coeftest(ols_multiple, vcov = vcovHC(ols_multiple, type = "HC1"))
ols_spi <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + population + gini + year_fct, data = merged)
summary(ols_spi)
