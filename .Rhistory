adj.r.squared = rep(as.numeric(summary_spi$r.squared["adjrsq"]), nrow(rob_stats_spi)),
row.names = NULL
)
#SCI Statistics DF
sci_df <- data.frame(
model = rep("M3: ols_sci", nrow(rob_stats_sci)),
term = rownames(rob_stats_sci),
estimate = rob_stats_sci[, 1],
std.error = rob_stats_sci[, 2],
t.statistic = rob_stats_sci[, 3],
p.value = rob_stats_sci[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_sci)^2) / ols_sci$df.residual), nrow(rob_stats_sci)),
r.squared = rep(as.numeric(summary_sci$r.squared["rsq"]), nrow(rob_stats_sci)),
adj.r.squared = rep(as.numeric(summary_sci$r.squared["adjrsq"]), nrow(rob_stats_sci)),
row.names = NULL
)
#Combined Mod Statistics DF
multiple_df <- data.frame(
model = "M3: ols_multiple",
term = rownames(rob_stats_multiple),
estimate = rob_stats_multiple[, 1],
std.error = rob_stats_multiple[, 2],
t.statistic = rob_stats_multiple[, 3],
p.value = rob_stats_multiple[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_multiple)^2) / ols_multiple$df.residual), nrow(rob_stats_multiple)),
r.squared = rep(as.numeric(summary_sci$r.squared["rsq"]), nrow(rob_stats_multiple)),
adj.r.squared = rep(as.numeric(summary_sci$r.squared["adjrsq"]), nrow(rob_stats_multiple)),
row.names = NULL
)
# Bind all together into one tidy dataframe
robust_mods_df <- bind_rows(spi_df, sci_df, multiple_df)
# Attributes under column names
attr(robust_mods_df$std.error, "label") <- "Robust Std. Errors Adjusted"
attr(robust_mods_df$t.statistic, "label") <- "Robust Std. Errors Adjusted"
attr(robust_mods_df$p.value, "label") <- "Robust Std. Errors Adjusted"
# View the result
print(robust_mods_df)
#SPI Statistics DF
spi_df <- data.frame(
model = rep("M1: ols_spi", nrow(rob_stats_spi)),
term = rownames(rob_stats_spi),
estimate = rob_stats_spi[, 1],
std.error = rob_stats_spi[, 2],
t.statistic = rob_stats_spi[, 3],
p.value = rob_stats_spi[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_spi)^2) / ols_spi$df.residual), nrow(rob_stats_spi)),
r.squared = rep(as.numeric(summary_spi$r.squared["rsq"]), nrow(rob_stats_spi)),
adj.r.squared = rep(as.numeric(summary_spi$r.squared["adjrsq"]), nrow(rob_stats_spi)),
row.names = NULL
)
#SCI Statistics DF
sci_df <- data.frame(
model = rep("M2: ols_sci", nrow(rob_stats_sci)),
term = rownames(rob_stats_sci),
estimate = rob_stats_sci[, 1],
std.error = rob_stats_sci[, 2],
t.statistic = rob_stats_sci[, 3],
p.value = rob_stats_sci[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_sci)^2) / ols_sci$df.residual), nrow(rob_stats_sci)),
r.squared = rep(as.numeric(summary_sci$r.squared["rsq"]), nrow(rob_stats_sci)),
adj.r.squared = rep(as.numeric(summary_sci$r.squared["adjrsq"]), nrow(rob_stats_sci)),
row.names = NULL
)
#Combined Mod Statistics DF
multiple_df <- data.frame(
model = "M3: ols_multiple",
term = rownames(rob_stats_multiple),
estimate = rob_stats_multiple[, 1],
std.error = rob_stats_multiple[, 2],
t.statistic = rob_stats_multiple[, 3],
p.value = rob_stats_multiple[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_multiple)^2) / ols_multiple$df.residual), nrow(rob_stats_multiple)),
r.squared = rep(as.numeric(summary_sci$r.squared["rsq"]), nrow(rob_stats_multiple)),
adj.r.squared = rep(as.numeric(summary_sci$r.squared["adjrsq"]), nrow(rob_stats_multiple)),
row.names = NULL
)
# Bind all together into one tidy dataframe
robust_mods_df <- bind_rows(spi_df, sci_df, multiple_df)
# Attributes under column names
attr(robust_mods_df$std.error, "label") <- "Robust Std. Errors Adjusted"
attr(robust_mods_df$t.statistic, "label") <- "Robust Std. Errors Adjusted"
attr(robust_mods_df$p.value, "label") <- "Robust Std. Errors Adjusted"
# View the result
print(robust_mods_df)
View(robust_mods_df)
library(readr)
ols_mods_results <- read_csv("output_CSVs/ols_mods_results.csv")
View(ols_mods_results)
#save to output_CSVs folder
write.csv(robust_mods_df, file = "output_CSVs/ols_mods_results.csv")
summary_spi
summary(ols_spi, vcov = vcovHC(ols_spi, cluster = "group", type = "HC1"))
summary_spi <- summary(ols_spi)
summary_spi
# Check correlation between SPI and SCI
cor(merged$spi_comp, merged$sci_overall, use = "complete.obs")
# Check VIF (Variance Inflation Factor) in Model 3
vif(ols_multiple)
print(tidy_vif)
# Check correlation between SPI and SCI
cor(merged$spi_comp, merged$sci_overall, use = "complete.obs")
# Check VIF (Variance Inflation Factor) in Model 3
vif(ols_multiple)
#make into Datatable
vif_vals <- vif(ols_multiple)   # returns a named vector
tidy_vif <- enframe(vif_vals, name = "term", value = "vif")
View(tidy_vif)
summary(ols_spi, vcov = vcovHC(ols_spi, cluster = "group", type = "HC1"))
print(robust_mods_df)
# Create a summary table for the OLS results
ols_results_summary <- robust_mods_df %>%
select(model, term, estimate, std.error, t.statistic, p.value) %>%
mutate(p.value = format.pval(p.value, digits = 3, scientific = TRUE))
print(ols_results_summary)
# 2. OLS for SPI and SDG - Overall
ols_spi_naive <- lm(sdg_overall ~ spi_comp, data = merged)
summary(ols_spi_naive)
resettest(ols_spi, power = 2:3, type = "fitted")
#FIX LATER
#lm test package
resettest(ols_spi, power = 2:3, type = "fitted")
# Chunk 1: setup
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 60)  # Adjust width as needed
)
# Chunk 2
# set working directory
setwd("~/Documents/GitHub/QMSS_Thesis_Sanchez")
#load libraries
source("packages.R")
# Chunk 5
#Load final cleaned 'merged' Dataset & selecting variables
merged_final <- read_csv("data/Main CSV Outputs/merged_cleaned.csv") %>%
dplyr::select(country_name, country_code, year, sdg_overall, spi_comp, sci_overall, di_score, regime_type_2, regime_type_4, regch_event, aut_ep, dem_ep, elect_dem, lib_dem, part_dem, delib_dem, egal_dem, academ_free, income_level, income_level_lab, gdp_pc, log_gdppc, gini, population, p1_use, p2_services, p3_products, p4_sources, p5_infra, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal14, goal15, goal16, goal17)
#writing final merged csv
write.table(merged_final, file = 'data/Main CSV Outputs/merged_final_df.csv', row.names=F, sep = ",")
# Chunk 6
#load final merged df
merged <- read_csv("data/Main CSV Outputs/merged_final_df.csv")
# Chunk 7
#correlation coefficients (r-squared), WITHOUT control variables
#x-var 1 = spi
correlation_sdg_spi <- cor(merged$sdg_overall, merged$spi_comp, use = "complete.obs")^2
#x-var 2 = sci
correlation_sdg_sci <- cor(merged$sdg_overall, merged$sci_overall, use = "complete.obs")^2
#x-var 3 = di
correlation_sdg_di <- cor(merged$sdg_overall, merged$di_score, use = "complete.obs")^2
# pasting result
string_corcoef <- "Correlation coefficient:"
paste(string_corcoef, correlation_sdg_spi, "(SPI)", correlation_sdg_sci, "(SCI)", correlation_sdg_di, "(DI)")
# Chunk 8
# 2. OLS for SPI and SDG - Overall
ols_spi_naive <- lm(sdg_overall ~ spi_comp, data = merged)
summary(ols_spi_naive)
# 2. OLS for SCI and SDG - Overall
ols_sci_naive <- lm(sdg_overall ~ sci_overall, data = merged)
summary(ols_sci_naive)
# 3. Multiple Regression with both SPI and SCI
ols_multiple_naive <- lm(sdg_overall ~ spi_comp + sci_overall, data = merged)
summary(ols_multiple_naive)
# Chunk 9
#residual plots
plot(ols_spi_naive, which = 1)  # SPI model
plot(ols_sci_naive, which = 1)  # SDG model
plot(ols_multiple_naive, which = 1)  # SDG model controlled
# Chunk 10
# 1. OLS for SPI and SDG - Overall
ols_spi <- plm(formula = sdg_overall ~ spi_comp + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_spi, vcov = vcovHC(ols_spi, cluster = "group", type = "HC1"))
# 2. OLS for SCI and SDG - Overall
ols_sci <- plm(formula = sdg_overall ~ sci_overall + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_sci, vcov = vcovHC(ols_sci, cluster = "group", type = "HC1"))
# 3. Multiple Regression with both SPI and SCI
ols_multiple <- plm(formula = sdg_overall ~ spi_comp + sci_overall + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_multiple, vcov = vcovHC(ols_multiple, cluster = "group", type = "HC1"))
# Chunk 11
# For model statistics extraction
summary_spi <- summary(ols_spi)
summary_sci <- summary(ols_sci)
summary_multiple <- summary(ols_multiple)
# extracting robust SEs and coefficients (using coeftest)
rob_stats_spi <- coeftest(ols_spi, vcov = vcovHC(ols_spi, cluster = "group", type = "HC1"))
rob_stats_sci <- coeftest(ols_sci, vcov = vcovHC(ols_sci, cluster = "group", type = "HC1"))
rob_stats_multiple <- coeftest(ols_multiple, vcov = vcovHC(ols_multiple, cluster = "group", type = "HC1"))
#SPI Statistics DF
spi_df <- data.frame(
model = rep("M1: ols_spi", nrow(rob_stats_spi)),
term = rownames(rob_stats_spi),
estimate = rob_stats_spi[, 1],
std.error = rob_stats_spi[, 2],
t.statistic = rob_stats_spi[, 3],
p.value = rob_stats_spi[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_spi)^2) / ols_spi$df.residual), nrow(rob_stats_spi)),
r.squared = rep(as.numeric(summary_spi$r.squared["rsq"]), nrow(rob_stats_spi)),
adj.r.squared = rep(as.numeric(summary_spi$r.squared["adjrsq"]), nrow(rob_stats_spi)),
row.names = NULL
)
#SCI Statistics DF
sci_df <- data.frame(
model = rep("M2: ols_sci", nrow(rob_stats_sci)),
term = rownames(rob_stats_sci),
estimate = rob_stats_sci[, 1],
std.error = rob_stats_sci[, 2],
t.statistic = rob_stats_sci[, 3],
p.value = rob_stats_sci[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_sci)^2) / ols_sci$df.residual), nrow(rob_stats_sci)),
r.squared = rep(as.numeric(summary_sci$r.squared["rsq"]), nrow(rob_stats_sci)),
adj.r.squared = rep(as.numeric(summary_sci$r.squared["adjrsq"]), nrow(rob_stats_sci)),
row.names = NULL
)
#Combined Mod Statistics DF
multiple_df <- data.frame(
model = "M3: ols_multiple",
term = rownames(rob_stats_multiple),
estimate = rob_stats_multiple[, 1],
std.error = rob_stats_multiple[, 2],
t.statistic = rob_stats_multiple[, 3],
p.value = rob_stats_multiple[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_multiple)^2) / ols_multiple$df.residual), nrow(rob_stats_multiple)),
r.squared = rep(as.numeric(summary_sci$r.squared["rsq"]), nrow(rob_stats_multiple)),
adj.r.squared = rep(as.numeric(summary_sci$r.squared["adjrsq"]), nrow(rob_stats_multiple)),
row.names = NULL
)
# Bind all together into one tidy dataframe
robust_mods_df <- bind_rows(spi_df, sci_df, multiple_df)
# Attributes under column names
attr(robust_mods_df$std.error, "label") <- "Robust Std. Errors Adjusted"
attr(robust_mods_df$t.statistic, "label") <- "Robust Std. Errors Adjusted"
attr(robust_mods_df$p.value, "label") <- "Robust Std. Errors Adjusted"
#save to output_CSVs folder
write.csv(robust_mods_df, file = "output_CSVs/ols_mods_results.csv")
# View the result
print(robust_mods_df)
# Chunk 12
# Check correlation between SPI and SCI
cor(merged$spi_comp, merged$sci_overall, use = "complete.obs")
# Check VIF (Variance Inflation Factor) in Model 3
vif(ols_multiple)
#make into Datatable
vif_vals <- vif(ols_multiple)   # returns a named vector
tidy_vif <- enframe(vif_vals, name = "term", value = "vif")
print(tidy_vif)
#FIX LATER
#lm test package
resettest(ols_spi, power = 2:3, type = "fitted")
#Breusch-Pagan tests
bptest(ols_spi)
bptest(ols_sci)
bptest(ols_multiple)
# switching to lm for AIC & BIC tests
ols_spi_lm <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + factor(year), data = merged)
ols_sci_lm <- lm(sdg_overall ~ sci_overall + di_score + log_gdppc + factor(year), data = merged)
ols_multiple_lm <- lm(sdg_overall ~ spi_comp + sci_overall + di_score + log_gdppc + factor(year), data = merged)
# Compare all three models with AIC
AIC(ols_spi_lm, ols_sci_lm, ols_multiple_lm)
# Compare all three models with BIC
BIC(ols_spi_lm, ols_sci_lm, ols_multiple_lm)
# switching to lm for AIC & BIC tests
ols_spi_lm <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + factor(year), data = merged)
ols_sci_lm <- lm(sdg_overall ~ sci_overall + di_score + log_gdppc + factor(year), data = merged)
ols_multiple_lm <- lm(sdg_overall ~ spi_comp + sci_overall + di_score + log_gdppc + factor(year), data = merged)
# Compare all three models with AIC
AIC(ols_spi_lm, ols_sci_lm, ols_multiple_lm)
# Chunk 1: setup
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 60)  # Adjust width as needed
)
# Chunk 2
# set working directory
setwd("~/Documents/GitHub/QMSS_Thesis_Sanchez")
#load libraries
source("packages.R")
# Chunk 5
#Load final cleaned 'merged' Dataset & selecting variables
merged_final <- read_csv("data/Main CSV Outputs/merged_cleaned.csv") %>%
dplyr::select(country_name, country_code, year, sdg_overall, spi_comp, sci_overall, di_score, regime_type_2, regime_type_4, regch_event, aut_ep, dem_ep, elect_dem, lib_dem, part_dem, delib_dem, egal_dem, academ_free, income_level, income_level_lab, gdp_pc, log_gdppc, gini, population, p1_use, p2_services, p3_products, p4_sources, p5_infra, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal14, goal15, goal16, goal17)
#writing final merged csv
write.table(merged_final, file = 'data/Main CSV Outputs/merged_final_df.csv', row.names=F, sep = ",")
# Chunk 6
#load final merged df
merged <- read_csv("data/Main CSV Outputs/merged_final_df.csv")
# Chunk 7
#correlation coefficients (r-squared), WITHOUT control variables
#x-var 1 = spi
correlation_sdg_spi <- cor(merged$sdg_overall, merged$spi_comp, use = "complete.obs")^2
#x-var 2 = sci
correlation_sdg_sci <- cor(merged$sdg_overall, merged$sci_overall, use = "complete.obs")^2
#x-var 3 = di
correlation_sdg_di <- cor(merged$sdg_overall, merged$di_score, use = "complete.obs")^2
# pasting result
string_corcoef <- "Correlation coefficient:"
paste(string_corcoef, correlation_sdg_spi, "(SPI)", correlation_sdg_sci, "(SCI)", correlation_sdg_di, "(DI)")
# Chunk 8
# 2. OLS for SPI and SDG - Overall
ols_spi_naive <- lm(sdg_overall ~ spi_comp, data = merged)
summary(ols_spi_naive)
# 2. OLS for SCI and SDG - Overall
ols_sci_naive <- lm(sdg_overall ~ sci_overall, data = merged)
summary(ols_sci_naive)
# 3. Multiple Regression with both SPI and SCI
ols_multiple_naive <- lm(sdg_overall ~ spi_comp + sci_overall, data = merged)
summary(ols_multiple_naive)
# Chunk 9
#residual plots
plot(ols_spi_naive, which = 1)  # SPI model
plot(ols_sci_naive, which = 1)  # SDG model
plot(ols_multiple_naive, which = 1)  # SDG model controlled
# Chunk 10
# 1. OLS for SPI and SDG - Overall
ols_spi <- plm(formula = sdg_overall ~ spi_comp + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_spi, vcov = vcovHC(ols_spi, cluster = "group", type = "HC1"))
# 2. OLS for SCI and SDG - Overall
ols_sci <- plm(formula = sdg_overall ~ sci_overall + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_sci, vcov = vcovHC(ols_sci, cluster = "group", type = "HC1"))
# 3. Multiple Regression with both SPI and SCI
ols_multiple <- plm(formula = sdg_overall ~ spi_comp + sci_overall + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_multiple, vcov = vcovHC(ols_multiple, cluster = "group", type = "HC1"))
# Chunk 11
# For model statistics extraction
summary_spi <- summary(ols_spi)
summary_sci <- summary(ols_sci)
summary_multiple <- summary(ols_multiple)
# extracting robust SEs and coefficients (using coeftest)
rob_stats_spi <- coeftest(ols_spi, vcov = vcovHC(ols_spi, cluster = "group", type = "HC1"))
rob_stats_sci <- coeftest(ols_sci, vcov = vcovHC(ols_sci, cluster = "group", type = "HC1"))
rob_stats_multiple <- coeftest(ols_multiple, vcov = vcovHC(ols_multiple, cluster = "group", type = "HC1"))
#SPI Statistics DF
spi_df <- data.frame(
model = rep("M1: ols_spi", nrow(rob_stats_spi)),
term = rownames(rob_stats_spi),
estimate = rob_stats_spi[, 1],
std.error = rob_stats_spi[, 2],
t.statistic = rob_stats_spi[, 3],
p.value = rob_stats_spi[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_spi)^2) / ols_spi$df.residual), nrow(rob_stats_spi)),
r.squared = rep(as.numeric(summary_spi$r.squared["rsq"]), nrow(rob_stats_spi)),
adj.r.squared = rep(as.numeric(summary_spi$r.squared["adjrsq"]), nrow(rob_stats_spi)),
row.names = NULL
)
#SCI Statistics DF
sci_df <- data.frame(
model = rep("M2: ols_sci", nrow(rob_stats_sci)),
term = rownames(rob_stats_sci),
estimate = rob_stats_sci[, 1],
std.error = rob_stats_sci[, 2],
t.statistic = rob_stats_sci[, 3],
p.value = rob_stats_sci[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_sci)^2) / ols_sci$df.residual), nrow(rob_stats_sci)),
r.squared = rep(as.numeric(summary_sci$r.squared["rsq"]), nrow(rob_stats_sci)),
adj.r.squared = rep(as.numeric(summary_sci$r.squared["adjrsq"]), nrow(rob_stats_sci)),
row.names = NULL
)
#Combined Mod Statistics DF
multiple_df <- data.frame(
model = "M3: ols_multiple",
term = rownames(rob_stats_multiple),
estimate = rob_stats_multiple[, 1],
std.error = rob_stats_multiple[, 2],
t.statistic = rob_stats_multiple[, 3],
p.value = rob_stats_multiple[, 4],
residual.SE = rep(sqrt(sum(residuals(ols_multiple)^2) / ols_multiple$df.residual), nrow(rob_stats_multiple)),
r.squared = rep(as.numeric(summary_sci$r.squared["rsq"]), nrow(rob_stats_multiple)),
adj.r.squared = rep(as.numeric(summary_sci$r.squared["adjrsq"]), nrow(rob_stats_multiple)),
row.names = NULL
)
# Bind all together into one tidy dataframe
robust_mods_df <- bind_rows(spi_df, sci_df, multiple_df)
# Attributes under column names
attr(robust_mods_df$std.error, "label") <- "Robust Std. Errors Adjusted"
attr(robust_mods_df$t.statistic, "label") <- "Robust Std. Errors Adjusted"
attr(robust_mods_df$p.value, "label") <- "Robust Std. Errors Adjusted"
#save to output_CSVs folder
write.csv(robust_mods_df, file = "output_CSVs/ols_mods_results.csv")
# View the result
print(robust_mods_df)
# Chunk 12
# Check correlation between SPI and SCI
cor(merged$spi_comp, merged$sci_overall, use = "complete.obs")
# Check VIF (Variance Inflation Factor) in Model 3
vif(ols_multiple)
#make into Datatable
vif_vals <- vif(ols_multiple)   # returns a named vector
tidy_vif <- enframe(vif_vals, name = "term", value = "vif")
print(tidy_vif)
# Chunk 13
#FIX LATER
#lm test package
resettest(ols_spi, power = 2:3, type = "fitted")
# Compare all three models with AIC
AIC(ols_spi_lm, ols_sci_lm, ols_multiple_lm)
# Compare all three models with AIC
AIC(ols_spi_lm, ols_sci_lm, ols_multiple_lm)
# Compare all three models with BIC
BIC(ols_spi_lm, ols_sci_lm, ols_multiple_lm)
# INTO DATAFRAME
aic_vals <- c(
AIC(ols_spi_lm),
AIC(ols_sci_lm),
AIC(ols_multiple_lm)
)
bic_vals <- c(
BIC(ols_spi_lm),
BIC(ols_sci_lm),
BIC(ols_multiple_lm)
)
# Model names
model_names <- c("ols_spi", "ols_sci", "ols_multiple")
# Combine into a dataframe
aic_bic_ols_results <- data.frame(
model = model_names,
AIC = aic_vals,
BIC = bic_vals
)
print(aic_bic_ols_results)
# saving to output_CSVs
write.csv(aic_bic_ols_results, file = "output_CSVs/aic_bic_ols_results.csv")
#Breusch-Pagan tests
bptest(ols_spi)
bptest(ols_sci)
bptest(ols_multiple)
#make into objects
bp_spi <- bptest(ols_spi)
bp_sci <- bptest(ols_sci)
bp_multiple <- bptest(ols_multiple)
# combine for data frame
bp_tests <- list(
ols_spi = bp_spi,
ols_sci = bp_sci,
ols_multiple = bp_multiple
)
# Tidy all tests and add a "model" column
df_bptests <- bp_tests %>%
map_df(~ tidy(.x), .id = "model")
df_bptests
write.table(df_bptests, file = 'output_CSVs/df_bptests_heterosked.csv', row.names=F, sep = ",")
# switching to lm for AIC & BIC tests
ols_spi_lm <- lm(sdg_overall ~ spi_comp + di_score + log_gdppc + factor(year), data = merged)
ols_sci_lm <- lm(sdg_overall ~ sci_overall + di_score + log_gdppc + factor(year), data = merged)
ols_multiple_lm <- lm(sdg_overall ~ spi_comp + sci_overall + di_score + log_gdppc + factor(year), data = merged)
# Compare all three models with AIC
AIC(ols_spi_lm, ols_sci_lm, ols_multiple_lm)
# Compare all three models with BIC
BIC(ols_spi_lm, ols_sci_lm, ols_multiple_lm)
# INTO DATAFRAME
aic_vals <- c(
AIC(ols_spi_lm),
AIC(ols_sci_lm),
AIC(ols_multiple_lm)
)
bic_vals <- c(
BIC(ols_spi_lm),
BIC(ols_sci_lm),
BIC(ols_multiple_lm)
)
# Model names
model_names <- c("ols_spi", "ols_sci", "ols_multiple")
# Combine into a dataframe
aic_bic_ols_results <- data.frame(
model = model_names,
AIC = aic_vals,
BIC = bic_vals
)
print(aic_bic_ols_results)
# saving to output_CSVs
write.csv(aic_bic_ols_results, file = "output_CSVs/aic_bic_ols_results.csv")
# 1. OLS for SPI and SDG - Overall
ols_spi <- plm(formula = sdg_overall ~ spi_comp + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_spi, vcov = vcovHC(ols_spi, cluster = "group", type = "HC1"))
# 2. OLS for SCI and SDG - Overall
ols_sci <- plm(formula = sdg_overall ~ sci_overall + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_sci, vcov = vcovHC(ols_sci, cluster = "group", type = "HC1"))
# 3. Multiple Regression with both SPI and SCI
ols_multiple <- plm(formula = sdg_overall ~ spi_comp + sci_overall + di_score + log_gdppc + factor(year),
model = "pooling",
index = c("country_code", "year"),
data = merged)
summary(ols_multiple, vcov = vcovHC(ols_multiple, cluster = "group", type = "HC1"))
print(robust_mods_df)
DT(robust_mods_df, options = list(pageLength = 10, autoWidth = TRUE))
library(DT)
data.table(robust_mods_df, options = list(pageLength = 10, autoWidth = TRUE))
?library(DT)
datatable(robust_mods_df, options = list(pageLength = 10, autoWidth = TRUE))
# DT for readability
datatable(robust_mods_df, options = list(pageLength = 10, autoWidth = TRUE))
load("~/Documents/GitHub/QMSS_Thesis_Sanchez/.RData")
