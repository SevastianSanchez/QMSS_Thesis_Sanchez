# Generate summary statistics for key variables
merged_stats <- merged %>%
filter(
case_when(
gni_filter == "HIC" ~ income_level == 'H',
gni_filter == "UMIC" ~ income_level == 'UM',
gni_filter == "LMIC" ~ income_level == 'LM',
gni_filter == "LIC" ~ income_level == 'L',
gni_filter == "all" ~ TRUE,          # Keep all observations
TRUE ~ FALSE                         # Exclude invalid filter options
)
) %>%
filter(
case_when(
regime_filter == "autocracy" ~ di_reg_type_2 == 0,
regime_filter == "democracy" ~ di_reg_type_2 == 1,
regime_filter == "all" ~ TRUE,       # Keep all observations
TRUE ~ FALSE # filter all else
)
) %>%
select(all_of(key_vars)) %>%
summarize(across(everything(),
list(
min = ~min(., na.rm = TRUE),
q1 = ~quantile(., 0.25, na.rm = TRUE),
median = ~median(., na.rm = TRUE),
mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
q3 = ~quantile(., 0.75, na.rm = TRUE),
max = ~max(., na.rm = TRUE),
n = ~sum(!is.na(.))
)))
# Reshape the data for better presentation
merged_stats_long <- merged_stats %>%
pivot_longer(cols = everything(),
names_to = c("variable", "stat"),
names_pattern = "(.*)_(.*)",
values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%
arrange(match(variable, key_vars))
# Create the table with APA styling and no caption number
summary_stats_table <- kable(merged_stats_long,
caption = paste("Descriptive Statistics for Key Variables,", "Subgrouped to:", if(gni_filter == "all"){"All GNI Levels"} else {gni_filter}, "and", if(regime_filter == "all"){"All Regime Types"} else {regime_filter}),
col.names = c("Variable", "Min", "1st Qu", "Median", "Mean", "SD", "3rd Qu", "Max", "N"),
booktabs = TRUE,
digits = 2,
align = c('l', rep('c', 8))) %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman", font_size = 12) %>%
row_spec(0, bold = FALSE, align = "c") %>%
column_spec(1, bold = FALSE)
# Save the table as HTML
save_kable(summary_stats_table,
file = paste("figures/data coverage & summary stats/summary", if(gni_filter == "all"){"_all_gni"} else {paste0("_", gni_filter)}, if(regime_filter == "all"){"_all_regime"} else {paste0("_", regime_filter)}, sep = "", ".html"))
# Display the table in the document
summary_stats_table
View(merged)
# Define and list variables in desired order
key_vars <- c("sdg_overall", "spi_comp", "sci_overall", "di_score", "gdp_pc", "log_gdppc")
# Apply subgroup filter for GNI level
gni_filter <- "all" # specify desired GNI level (e.g., LIC, LMIC, UMIC, HIC, all)
# Apply subgroup filter level for regime type
regime_filter <- "autocracy" # specify desired regime type (e.g., all, Democracy, Autocracy)
# Generate summary statistics for key variables
merged_stats <- merged %>%
filter(
case_when(
gni_filter == "HIC" ~ income_level == 'H',
gni_filter == "UMIC" ~ income_level == 'UM',
gni_filter == "LMIC" ~ income_level == 'LM',
gni_filter == "LIC" ~ income_level == 'L',
gni_filter == "all" ~ TRUE,          # Keep all observations
TRUE ~ FALSE                         # Exclude invalid filter options
)
) %>%
filter(
case_when(
regime_filter == "autocracy" ~ di_reg_type_2 == 0,
regime_filter == "democracy" ~ di_reg_type_2 == 1,
regime_filter == "all" ~ TRUE,       # Keep all observations
TRUE ~ FALSE # filter all else
)
) %>%
select(all_of(key_vars)) %>%
summarize(across(everything(),
list(
min = ~min(., na.rm = TRUE),
q1 = ~quantile(., 0.25, na.rm = TRUE),
median = ~median(., na.rm = TRUE),
mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
q3 = ~quantile(., 0.75, na.rm = TRUE),
max = ~max(., na.rm = TRUE),
n = ~sum(!is.na(.))
)))
# Reshape the data for better presentation
merged_stats_long <- merged_stats %>%
pivot_longer(cols = everything(),
names_to = c("variable", "stat"),
names_pattern = "(.*)_(.*)",
values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%
arrange(match(variable, key_vars))
# Create the table with APA styling and no caption number
summary_stats_table <- kable(merged_stats_long,
caption = paste("Descriptive Statistics for Key Variables,", "Subgrouped to:", if(gni_filter == "all"){"All GNI Levels"} else {gni_filter}, "and", if(regime_filter == "all"){"All Regime Types"} else {regime_filter}),
col.names = c("Variable", "Min", "1st Qu", "Median", "Mean", "SD", "3rd Qu", "Max", "N"),
booktabs = TRUE,
digits = 2,
align = c('l', rep('c', 8))) %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman", font_size = 12) %>%
row_spec(0, bold = FALSE, align = "c") %>%
column_spec(1, bold = FALSE)
# Save the table as HTML
save_kable(summary_stats_table,
file = paste("figures/data coverage & summary stats/summary", if(gni_filter == "all"){"_all_gni"} else {paste0("_", gni_filter)}, if(regime_filter == "all"){"_all_regime"} else {paste0("_", regime_filter)}, sep = "", ".html"))
# Display the table in the document
summary_stats_table
# set working directory
setwd("~/Documents/GitHub/QMSS_Thesis_Sanchez")
#load libraries/packages
source("packages.R")
# load data
source("Comp2_panel_wrangling.R")
# EIU DI binary regime type
table(panel_data$di_reg_type_2)
# RoW V-Dem binary regime type
table(panel_data$regime_type_binary)
# income_level_recoded
table(panel_data$income_level_recoded)
# Load the panel data
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc + factor(income_level_recoded),
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = di_reg_type_2 == 1, # modifying based on regime type
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
panel_sub <- panel_data %>%
filter(di_reg_type_2 == 1) # Democracies only
# Load the panel data
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc + factor(income_level_recoded),
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = di_reg_type_2 == 0, # modifying based on regime type
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
panel_sub <- panel_data %>%
filter(di_reg_type_2 == 1) # Democracies only
# Load the panel data
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc + factor(income_level_recoded),
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = di_reg_type_2 == 1, # modifying based on regime type
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# GNI Class
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
#subset = income_level_recoded == 3, # modifying based on income level
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = has_aut_ep == TRUE, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = has_dem_ep == TRUE, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# autocratized variable
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = autocratized == TRUE, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# autocratized variable
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = autocratized == 1, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# autocratized variable
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = autocratized == 1, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# autocratized variable
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = democratized == TRUE, # modifying based on regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# autocratized variable
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = democratized == 1, # modifying based on regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = has_aut_ep == 1, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = has_dem_ep == 1, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# autocratized variable
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = autocratized == 1, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# Set line widths for mean and median lines
med_linewidth <- 0.6
mean_linewidth <- 0.5
# Create histograms for key index variables using ggplot2
p1 <- ggplot(merged, aes(x = spi_comp)) +
geom_histogram(bins = 20, fill = "lightblue", color = "white", alpha = 0.7) +
geom_vline(xintercept = median(merged$spi_comp, na.rm = TRUE),
color = "red", linewidth = med_linewidth, linetype = "dashed") +
geom_vline(xintercept = mean(merged$spi_comp, na.rm = TRUE),
color = "black", linewidth = mean_linewidth) +
labs(title = "Statistical Performance Index (2016-2023)",
x = "Composite Score (0-100)",
y = "Frequency (country-years)") +
theme_minimal()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 10, fig.height = 6)
# Chunk 2
# set working directory
setwd("~/Documents/GitHub/QMSS_Thesis_Sanchez")
# Load all packages from the packages.R file
source("packages.R")
# Load the merged (filtered, final) and merged_full (unfiltered, full) datasets
merged_full <- read_csv("data/Main CSV Outputs/merged_full_df.csv") # full unfiltered dataset
merged <- read_csv("data/Main CSV Outputs/merged_final_df.csv") # filtered dataset
# regime type variable (based on EIU DI data)
merged <- merged %>%
mutate(di_reg_type_2 = factor(case_when(
di_score < 5 ~ 0,  # Autocracy
di_score >= 5 ~ 1  # Democracy
)))
# Define key variables for analysis
key_vars <- c("sdg_overall", "spi_comp", "sci_overall", "di_score",
"log_gdppc", "gdp_pc")
group_vars <- c("income_level", "regime_type_2", "regime_type_4")
# Chunk 3
# Basic dimensions of the dataset
cat("Total number of observations (rows):", nrow(merged_full), "\n")
cat("Total number of variables (columns):", ncol(merged_full), "\n")
cat("Year range:", min(merged_full$year, na.rm=TRUE), "to", max(merged_full$year, na.rm=TRUE), "\n")
cat("Total number of countries:", length(unique(merged_full$country_code)), "\n")
# Chunk 4
# Function to get coverage statistics for a variable
get_coverage <- function(data, var_name) {
total_obs <- sum(!is.na(data[[var_name]]))
total_countries <- length(unique(data$country_code[!is.na(data[[var_name]])]))
total_years <- length(unique(data$year[!is.na(data[[var_name]])]))
missing_obs <- sum(is.na(data[[var_name]]))
missing_percent <- round(missing_obs / nrow(data) * 100, 2)
return(data.frame(
Variable = var_name,
Observations = total_obs,
Countries = total_countries,
Years = total_years,
Missing = missing_obs,
Missing_Percent = missing_percent
))
}
# Get coverage for all key variables
coverage_stats <- bind_rows(lapply(key_vars, function(var) get_coverage(merged_full, var)))
# Create the table with APA styling and no caption number
coverage_table <- kable(coverage_stats,
caption = "Coverage Statistics for Key Variables (unfiltered)",
col.names = c("Variable", "Observations", "Countries", "Years", "Missing Values", "Missing (%)"),
align = c('l', rep('c', 5)),
booktabs = TRUE) %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman", font_size = 12, "basic") %>%
row_spec(0, bold = FALSE, align = "c") %>%
column_spec(1, bold = FALSE)
# Save the table as HTML
save_kable(coverage_table, file = "figures/data coverage & summary stats/full_coverage_stats_table.html")
# Display the table in the document
coverage_table
# Chunk 5
# Create a table showing variable coverage by year
year_coverage <- merged_full %>%
group_by(year) %>%
summarise(across(all_of(key_vars), ~sum(!is.na(.)), .names = "{.col}")) %>%
arrange(year)
# Create the table with APA styling and no caption number
year_coverage_table <- kable(year_coverage,
caption = "Number of Countries Covered by Year for Key Variables (unfiltered)",
booktabs = TRUE,
align = c('l', rep('c', length(key_vars)))) %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman", font_size = 12, "basic") %>%
row_spec(0, bold = FALSE, align = "c") %>%
column_spec(1, bold = FALSE)
# Save the table as HTML
save_kable(year_coverage_table, file = "figures/data coverage & summary stats/full_year_coverage_table.html")
# Display the table in the document
year_coverage_table
# Chunk 6
# Get coverage for all key variables
coverage_stats <- bind_rows(lapply(key_vars, function(var) get_coverage(merged, var)))
# Create the table with APA styling and no caption number
coverage_table <- kable(coverage_stats,
caption = "Coverage Statistics for Key Variables (filtered)",
col.names = c("Variable", "Observations", "Countries", "Years", "Missing Values", "Missing (%)"),
align = c('l', rep('c', 5)),
booktabs = TRUE) %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman", font_size = 12, "basic") %>%
row_spec(0, bold = FALSE, align = "c") %>%
column_spec(1, bold = FALSE)
# Save the table as HTML
save_kable(coverage_table, file = "figures/data coverage & summary stats/final_coverage_stats_table.html")
# Display the table in the document
coverage_table
# Chunk 7
# Create a table showing variable coverage by year
year_coverage <- merged %>%
group_by(year) %>%
summarise(across(all_of(key_vars), ~sum(!is.na(.)), .names = "{.col}")) %>%
arrange(year)
# Create the table with APA styling and no caption number
year_coverage_table <- kable(year_coverage,
caption = "Number of Countries Covered by Year for Key Variables (filtered)",
booktabs = TRUE,
align = c('l', rep('c', length(key_vars)))) %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman", font_size = 12, "basic") %>%
row_spec(0, bold = FALSE, align = "c") %>%
column_spec(1, bold = FALSE)
# Save the table as HTML
save_kable(year_coverage_table, file = "figures/data coverage & summary stats/final_year_coverage_table.html")
# Display the table in the document
year_coverage_table
# Define and list variables in desired order
key_vars <- c("sdg_overall", "spi_comp", "sci_overall", "di_score", "gdp_pc", "log_gdppc")
# Apply subgroup filter for GNI level
gni_filter <- "all" # specify desired GNI level (e.g., LIC, LMIC, UMIC, HIC, all)
# Apply subgroup filter level for regime type
regime_filter <- "autocracy" # specify desired regime type (e.g., all, Democracy, Autocracy)
# Generate summary statistics for key variables
merged_stats <- merged %>%
filter(
case_when(
gni_filter == "HIC" ~ income_level == 'H',
gni_filter == "UMIC" ~ income_level == 'UM',
gni_filter == "LMIC" ~ income_level == 'LM',
gni_filter == "LIC" ~ income_level == 'L',
gni_filter == "all" ~ TRUE,          # Keep all observations
TRUE ~ FALSE                         # Exclude invalid filter options
)
) %>%
filter(
case_when(
regime_filter == "autocracy" ~ di_reg_type_2 == 0,
regime_filter == "democracy" ~ di_reg_type_2 == 1,
regime_filter == "all" ~ TRUE,       # Keep all observations
TRUE ~ FALSE # filter all else
)
) %>%
select(all_of(key_vars)) %>%
summarize(across(everything(),
list(
min = ~min(., na.rm = TRUE),
q1 = ~quantile(., 0.25, na.rm = TRUE),
median = ~median(., na.rm = TRUE),
mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
q3 = ~quantile(., 0.75, na.rm = TRUE),
max = ~max(., na.rm = TRUE),
n = ~sum(!is.na(.))
)))
# Reshape the data for better presentation
merged_stats_long <- merged_stats %>%
pivot_longer(cols = everything(),
names_to = c("variable", "stat"),
names_pattern = "(.*)_(.*)",
values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%
arrange(match(variable, key_vars))
# Create the table with APA styling and no caption number
summary_stats_table <- kable(merged_stats_long,
caption = paste("Descriptive Statistics for Key Variables,", "Subgrouped to:", if(gni_filter == "all"){"All GNI Levels"} else {gni_filter}, "and", if(regime_filter == "all"){"All Regime Types"} else {regime_filter}),
col.names = c("Variable", "Min", "1st Qu", "Median", "Mean", "SD", "3rd Qu", "Max", "N"),
booktabs = TRUE,
digits = 2,
align = c('l', rep('c', 8))) %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman", font_size = 12) %>%
row_spec(0, bold = FALSE, align = "c") %>%
column_spec(1, bold = FALSE)
# Save the table as HTML
save_kable(summary_stats_table,
file = paste("figures/data coverage & summary stats/summary", if(gni_filter == "all"){"_all_gni"} else {paste0("_", gni_filter)}, if(regime_filter == "all"){"_all_regime"} else {paste0("_", regime_filter)}, sep = "", ".html"))
# Display the table in the document
summary_stats_table
# autocratized variable
FE_testing <- plm(formula = sci_overall ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = autocratized == 1, # modifying based regime stability
effect = "twoways")
# Chunk 1
# set working directory
setwd("~/Documents/GitHub/QMSS_Thesis_Sanchez")
#load libraries/packages
source("packages.R")
# load data
source("Comp2_panel_wrangling.R")
# Chunk 2
# EIU DI binary regime type
table(panel_data$di_reg_type_2)
# RoW V-Dem binary regime type
table(panel_data$regime_type_binary)
# income_level_recoded
table(panel_data$income_level_recoded)
# Chunk 3
panel_sub <- panel_data %>%
filter(di_reg_type_2 == 1) # Democracies only
# Load the panel data
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc + factor(income_level_recoded),
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = di_reg_type_2 == 0, # modifying based on regime type
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# Chunk 4
# GNI Class
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
#subset = income_level_recoded == 3, # modifying based on income level
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# Chunk 5
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = has_aut_ep == 1, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# Chunk 6
FE_testing <- plm(formula = spi_comp ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = has_dem_ep == 1, # modifying based regime stability
effect = "twoways")
summary(FE_testing)
summary(FE_testing, vcov = vcovHC(FE_testing, cluster = "group", type = "HC1"))
# autocratized variable
FE_testing <- plm(formula = sci_overall ~ di_score + dplyr::lag(di_score, 1) + dplyr::lag(di_score, 2) + log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
subset = autocratized == 1, # modifying based regime stability
effect = "twoways")
View(all_data)
