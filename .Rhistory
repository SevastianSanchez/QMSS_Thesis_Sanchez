rob_se_ols <- coeftest(ols_spi_di, vcov = vcovHC(ols_spi_di, cluster = "group", type = "HC1"))
rob_se_fd <- coeftest(fd_spi_di, vcov = vcovHC(fd_spi_di, cluster = "group", type = "HC1"))
rob_se_fe <- coeftest(fe_spi_di, vcov = vcovHC(fe_spi_di, cluster = "group", type = "HC1"))
# Create a list of robust standard errors for stargazer
robust_se_list <- list(
rob_se_ols[, 2],
rob_se_fd[, 2],
rob_se_fe[, 2]
)
# Create a stargazer table for the three models
stargazer(
ols_spi_di, fd_spi_di, fe_spi_di,
se = robust_se_list,
type = "html",
out = "figures/s1_base_models.html",
title = "Stage 1: DI -> SPI Models",
align = TRUE,
dep.var.labels = "SPI Overall Score",
column.labels = c("POLS", "FD", "FE"),
omit = "factor\\(year\\)",  # Omits year fixed effects from display
model.names = FALSE
)
# Chunk 6
# don't include income_level_recoded variable -- Decide whether to include it or not.
ols_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year), data = panel_data) # regular linear model
fd_spi_di <- lm(spi_diff ~ dplyr::lag(di_diff, 1) + log_gdppc_diff + income_level_recoded, data = fd_data)
fe_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year) + factor(country_code), data = panel_data)
# Performing RESET tests for the base models
resettest(ols_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))
resettest(fd_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))
resettest(fe_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))
# Saving results to a dataframe
s1_reset_results <- data.frame(
model = c("ols_spi_di", "fd_spi_di", "fe_spi_di"),
F_statistic = c(resettest(ols_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$statistic,
resettest(fd_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$statistic,
resettest(fe_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$statistic),
p_value = c(resettest(ols_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$p.value,
resettest(fd_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$p.value,
resettest(fe_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$p.value)
)
print(s1_reset_results)
# Save the results to a CSV file
write.csv(s1_reset_results, file = "output_CSVs/s1_reset_results.csv", row.names = FALSE)
# Chunk 7
# No quatratic Terms Applied - Baseline
fe_spi_di_base <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + cen_log_gdppc + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
rob_sum_base <-summary(fe_spi_di_base, vcov = vcovHC(fe_spi_di_base, cluster = "group", type = "HC1"))
# + Quadratic terms for DI
fe_quads_s1_m2 <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + dplyr::lag(cen_di_score_quad, n = 1) + cen_log_gdppc + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
rob_sum_m2 <- summary(fe_quads_s1_m2, vcov = vcovHC(fe_quads_s1_m2, cluster = "group", type = "HC1"))
# + Quadratic terms for DI and Log(GDP)
fe_quads_s1_m3 <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + dplyr::lag(cen_di_score_quad, n = 1)
+ cen_log_gdppc + cen_log_gdppc_quad + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
rob_sum_m3 <- summary(fe_quads_s1_m3, vcov = vcovHC(fe_quads_s1_m3, cluster = "group", type = "HC1"))
# + Cubic terms for DI and Log(GDP)
fe_cubics_s1_m4 <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + dplyr::lag(cen_di_score_quad, n = 1) + dplyr::lag(cen_di_score_cubic, n = 1) + cen_log_gdppc + cen_log_gdppc_quad + cen_log_gdppc_cubic + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
rob_sum_m4 <- summary(fe_cubics_s1_m4, vcov = vcovHC(fe_cubics_s1_m4, cluster = "group", type = "HC1"))
# Extracting robust standard errors for each model
rob_se_base <- coeftest(fe_spi_di_base, vcov = vcovHC(fe_spi_di_base, cluster = "group", type = "HC1"))
rob_se_m2  <- coeftest(fe_quads_s1_m2, vcov = vcovHC(fe_quads_s1_m2, cluster = "group", type = "HC1"))
rob_se_m3  <- coeftest(fe_quads_s1_m3, vcov = vcovHC(fe_quads_s1_m3, cluster = "group", type = "HC1"))
rob_se_m4 <- coeftest(fe_cubics_s1_m4, vcov = vcovHC(fe_cubics_s1_m4, cluster = "group", type = "HC1"))
# stargazer table
library(stargazer)
stargazer(fe_spi_di_base, fe_quads_s1_m2, fe_quads_s1_m3, fe_cubics_s1_m4,
se = list(rob_se_base[, 2], rob_se_m2[, 2], rob_se_m3[, 2], rob_se_m4[, 2]
),
title = "Applying Polynomial Terms to Stage 1 Models",
align = TRUE,
dep.var.labels = "SPI Overall Score",
column.labels = c("FE Base", "Quad DI", "Quad DI+GDP", "Cubic DI+GDP"),
#covariate.labels = c("SPI", "SPI Squared", "DI", "DI Squared",
#                     "Log GDPpc", "Log GDPpc Squared", "Intercept"),
notes = "All models apply fixed effects. Robust standard errors clustered by country in parentheses",
type = "html",  # Change to "latex" for LaTeX output or "html" for Word
report = "vcs*",  # Shows significance stars and standard errors
model.numbers = FALSE,
keep.stat = c("n", "rsq", "adj.rsq"),
out = "figures/poly_s1_models.html") #saved as html
# AIC/BIC function
source('plm_aic_bic_function.R')
plm_aic_bic(rob_sum_base) # regular FE
plm_aic_bic(rob_sum_m2) # quadratic FE
plm_aic_bic(rob_sum_m3) # quadratic FE
plm_aic_bic(rob_sum_m4) # cubic FE
# Chunk 8
### HYPOTHESES ###
# Interaction 1: DI x GNI Class
# HA: The impact of SPI on SDG performance varies depending on GNI Classification
di_x_inc_lvl <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, 1)*dplyr::lag(income_level_recoded, 1) + cen_log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
effect = "twoways")
summary(di_x_inc_lvl, vcov = vcovHC(di_x_inc_lvl, cluster = "group", type = "HC1"))
# Interaction 2: DI x Regime Type (Binary)
# HA: The impact of SPI on SDG performance varies depending on Regime Type (Binary)
di_x_reg_binary <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, 1)*dplyr::lag(autocracy, 1) + cen_log_gdppc,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
summary(di_x_reg_binary, vcov = vcovHC(di_x_reg_binary, cluster = "group", type = "HC1"))
# Interaction 3 DI x Regime Change Episode/Direction
# HA: The impact of SPI on SDG performance varies depending on Regime Change Status/Direction
di_x_reg_eps <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, 1)*dplyr::lag(aut_ep, 1) + dplyr::lag(cen_di_score, 1)*dplyr::lag(dem_ep, 1) + cen_log_gdppc,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
summary(di_x_reg_eps, vcov = vcovHC(di_x_reg_eps, cluster = "group", type = "HC1"))
# Enhanced helper function
tidy_plm_robust <- function(model, model_name) {
tidy_coef <- tidy(model,
conf.int = TRUE,
vcov. = vcovHC(model, cluster = "group", type = "HC1")) %>%
mutate(model = model_name)
# Extract model statistics
model_summary <- summary(model)
tidy_coef %>%
mutate(
adj_r_squared = model_summary$r.squared["adjrsq"]
)
}
# Apply tidy_plm_robust() function to all models
tidy_di_x_inc_lvl    <- tidy_plm_robust(di_x_inc_lvl, "Moderator: DI x Income Level")
tidy_di_x_reg_binary <- tidy_plm_robust(di_x_reg_binary, "Moderator: DI x Regime Type (Binary)")
tidy_di_x_reg_eps  <- tidy_plm_robust(di_x_reg_eps, "Moderator: DI x Regime Change Episode (aut_ep & dem_ep)")
model_n_obs <- tibble(
model = c("Moderator: DI x Income Level", "Moderator: DI x Regime Type Binary",
"Moderator: DI x Regime Change Episode (aut_ep & dem_ep)"),
n_obs = c(nobs(di_x_inc_lvl), nobs(di_x_reg_binary),
nobs(di_x_reg_eps))
)
# Combine all tidy data frames into one
all_models_tidy <- bind_rows(tidy_di_x_inc_lvl,
tidy_di_x_reg_binary,
tidy_di_x_reg_eps) %>%
left_join(model_n_obs, by = "model") %>%
select(model, term, estimate, std.error, p.value, adj_r_squared, n_obs, everything()) %>%
arrange(model, term)
# Save the tidy data frame to a CSV file
write_csv(all_models_tidy, "output_CSVs/fe_s1_interactions.csv")
# extracting robust standard errors for each interaction model
rob_se_di_x_inc_lvl <- coeftest(di_x_inc_lvl, vcov = vcovHC(di_x_inc_lvl, cluster = "group", type = "HC1"))
rob_se_di_x_reg_binary <- coeftest(di_x_reg_binary, vcov = vcovHC(di_x_reg_binary, cluster = "group", type = "HC1"))
rob_se_di_x_reg_eps <- coeftest(di_x_reg_eps, vcov = vcovHC(di_x_reg_eps, cluster = "group", type = "HC1"))
# Create a list of robust standard errors for stargazer
robust_se_list <- list(
rob_se_di_x_inc_lvl[, 2],
rob_se_di_x_reg_binary[, 2],
rob_se_di_x_reg_eps[, 2]
)
stargazer(
di_x_inc_lvl, di_x_reg_binary, di_x_reg_eps,
se = robust_se_list,
type = "html",
out = "figures/fe_s1_interactions.html",
title = "Stage 1: Applying Moderators to Two-Way Fixed Effects Models",
align = TRUE,
dep.var.labels = "SDG Overall",
column.labels = c("DI x Income Level", "DI x Regime Type (Binary: Autocracy)", "DI x Regime Change Episode"),
omit = "factor\\(year\\)",  # Omits year fixed effects from display
model.names = FALSE
)
shapiro.test(residuals(ols_spi_di))
vif(fe_spi_di_base)
vif(fe_spi_di)
View(fd_spi_di)
View(fe_spi_di)
fe_spi_di_base <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + cen_log_gdppc + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
vif(fe_spi_di_base)
ols_spi_di <- plm(
formula = spi_comp ~ dplyr::lag(di_score, n=1) + log_gdppc + income_level_recoded + factor(year),
index = c("country_code", "year"),
model = "pooling",
data = panel_data)
summary(ols_spi_di, vcov = vcovHC(ols_spi_di, cluster = "group", type = "HC1"))
vif(ols_spi_di)
# Full POLS model: SPI ~ DI
ols_spi_di <- plm(
formula = spi_comp ~ dplyr::lag(di_score, n=1) + log_gdppc + income_level_recoded + factor(year),
index = c("country_code", "year"),
model = "within",
data = panel_data)
summary(ols_spi_di, vcov = vcovHC(ols_spi_di, cluster = "group", type = "HC1"))
vif(ols_spi_di)
ols_spi_di <- plm(
formula = spi_comp ~ dplyr::lag(di_score, n=1) + log_gdppc + income_level_recoded + factor(year),
index = c("country_code", "year"),
model = "pooling",
data = panel_data)
summary(ols_spi_di, vcov = vcovHC(ols_spi_di, cluster = "group", type = "HC1"))
vif(fe_spi_di)
ols_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year), data = panel_data) # regular linear model
fe_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year) + factor(country_code), data = panel_data)
vif(ols_spi_di)
vif(fe_spi_di)
ols_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year), data = panel_data) # regular linear model
fe_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year) + factor(country_code), data = panel_data)
vif(ols_spi_di)
vif(fe_spi_di)
cor(panel_data$log_gdppc, panel_data$income_level_recoded)
# APPLY Wooldridge Test for AR(1) Errors in FE Panel Models: pwartest()
# https://search.r-project.org/CRAN/refmans/plm/html/pwartest.html
# This is MUCH BETTER for panel data with small T AND unbalanced panels!!!
pwartest(fe_spi_di_base) # AR(1) [significant]
pwartest(fe_spi_di_base) # AR(1) [significant]
# Apply Breusch-Pagan test for heteroskedasticity
bptest(fe_spi_di_base, studentize = TRUE) # Heteroskedasticity [significant]
# Chunk 1
# set working directory
setwd("~/Documents/GitHub/QMSS_Thesis_Sanchez")
#load libraries/packages
source("packages.R")
# load data
source("Comp2_panel_wrangling.R")
# Chunk 2
# Full POLS model: SPI ~ DI
ols_spi_di <- plm(
formula = spi_comp ~ dplyr::lag(di_score, n=1) + log_gdppc + income_level_recoded + factor(year),
index = c("country_code", "year"),
model = "pooling",
data = panel_data)
summary(ols_spi_di, vcov = vcovHC(ols_spi_di, cluster = "group", type = "HC1"))
# plot relationship: lagged DI vs SPI
spi_di_s1_scatter <- ggplot(panel_data, aes(x = dplyr::lag(di_score, 1), y = spi_comp)) +
geom_point(color = "steelblue", size = 1, alpha = 0.65) +
geom_smooth(method = "lm",
se = TRUE, color = "darkblue", size = 1) +
labs(
title = "Effect of Democracy Levels on Statistical Capacity",
x = "Lagged Democracy Index (0-10 Scale)",
y = "SPI Composite (0-100 Scale)"
) +
theme_minimal()
# Save to specific folder
ggsave("figures/stage_1_n_2_scatterplots/spi_di_s1_scatterplot.png", spi_di_s1_scatter, width = 8, height = 6)
# Chunk 3
# Mediator: SPI ~ DI (M ~ X)
fd_spi_di <- plm(
formula = spi_comp ~ dplyr::lag(di_score, n=1) + log_gdppc + income_level_recoded,
index = c("country_code", "year"),
data = fd_data, #sub = (has_aut_ep == TRUE),
model = "fd"
)
# Country-level custard Robust SEs
summary(fd_spi_di, vcov = vcovHC(fd_spi_di, cluster = "group", type = "HC1"))
# Chunk 4
# Mediator: SPI ~ DI (M ~ X)
fe_spi_di <- plm(
formula = spi_comp ~ dplyr::lag(di_score, n=1) + log_gdppc + income_level_recoded + factor(year),
index = c("country_code", "year"),
data = panel_data,
model = "within", #FE
effect = "twoways"
)
summary(fe_spi_di, vcov = vcovHC(fe_spi_di, cluster = "group", type = "HC1")) # Robust SEs
# Chunk 5
# Extracting robust standard errors for each model
rob_se_ols <- coeftest(ols_spi_di, vcov = vcovHC(ols_spi_di, cluster = "group", type = "HC1"))
rob_se_fd <- coeftest(fd_spi_di, vcov = vcovHC(fd_spi_di, cluster = "group", type = "HC1"))
rob_se_fe <- coeftest(fe_spi_di, vcov = vcovHC(fe_spi_di, cluster = "group", type = "HC1"))
# Create a list of robust standard errors for stargazer
robust_se_list <- list(
rob_se_ols[, 2],
rob_se_fd[, 2],
rob_se_fe[, 2]
)
# Create a stargazer table for the three models
stargazer(
ols_spi_di, fd_spi_di, fe_spi_di,
se = robust_se_list,
type = "html",
out = "figures/s1_base_models.html",
title = "Stage 1: DI -> SPI Models",
align = TRUE,
dep.var.labels = "SPI Overall Score",
column.labels = c("POLS", "FD", "FE"),
omit = "factor\\(year\\)",  # Omits year fixed effects from display
model.names = FALSE
)
# Chunk 6
# transforming to base R lm()
ols_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year), data = panel_data) # regular linear model
fd_spi_di <- lm(spi_diff ~ dplyr::lag(di_diff, 1) + log_gdppc_diff + income_level_recoded, data = fd_data)
fe_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year) + factor(country_code), data = panel_data)
# Performing RESET tests for the base models
resettest(ols_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))
resettest(fd_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))
resettest(fe_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))
# Saving results to a dataframe
s1_reset_results <- data.frame(
model = c("ols_spi_di", "fd_spi_di", "fe_spi_di"),
F_statistic = c(resettest(ols_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$statistic,
resettest(fd_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$statistic,
resettest(fe_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$statistic),
p_value = c(resettest(ols_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$p.value,
resettest(fd_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$p.value,
resettest(fe_spi_di, power = 2:3, type = "regressor",
vcov = function(x) vcovHC(x, cluster = "group", type = "HC1"))$p.value)
)
print(s1_reset_results)
# Save the results to a CSV file
write.csv(s1_reset_results, file = "output_CSVs/s1_reset_results.csv", row.names = FALSE)
# Chunk 7
# No quatratic Terms Applied - Baseline
fe_spi_di_base <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + cen_log_gdppc + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
rob_sum_base <-summary(fe_spi_di_base, vcov = vcovHC(fe_spi_di_base, cluster = "group", type = "HC1"))
# + Quadratic terms for DI
fe_quads_s1_m2 <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + dplyr::lag(cen_di_score_quad, n = 1) + cen_log_gdppc + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
rob_sum_m2 <- summary(fe_quads_s1_m2, vcov = vcovHC(fe_quads_s1_m2, cluster = "group", type = "HC1"))
# + Quadratic terms for DI and Log(GDP)
fe_quads_s1_m3 <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + dplyr::lag(cen_di_score_quad, n = 1)
+ cen_log_gdppc + cen_log_gdppc_quad + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
rob_sum_m3 <- summary(fe_quads_s1_m3, vcov = vcovHC(fe_quads_s1_m3, cluster = "group", type = "HC1"))
# + Cubic terms for DI and Log(GDP)
fe_cubics_s1_m4 <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, n = 1) + dplyr::lag(cen_di_score_quad, n = 1) + dplyr::lag(cen_di_score_cubic, n = 1) + cen_log_gdppc + cen_log_gdppc_quad + cen_log_gdppc_cubic + income_level_recoded,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
rob_sum_m4 <- summary(fe_cubics_s1_m4, vcov = vcovHC(fe_cubics_s1_m4, cluster = "group", type = "HC1"))
# Extracting robust standard errors for each model
rob_se_base <- coeftest(fe_spi_di_base, vcov = vcovHC(fe_spi_di_base, cluster = "group", type = "HC1"))
rob_se_m2  <- coeftest(fe_quads_s1_m2, vcov = vcovHC(fe_quads_s1_m2, cluster = "group", type = "HC1"))
rob_se_m3  <- coeftest(fe_quads_s1_m3, vcov = vcovHC(fe_quads_s1_m3, cluster = "group", type = "HC1"))
rob_se_m4 <- coeftest(fe_cubics_s1_m4, vcov = vcovHC(fe_cubics_s1_m4, cluster = "group", type = "HC1"))
# stargazer table
library(stargazer)
stargazer(fe_spi_di_base, fe_quads_s1_m2, fe_quads_s1_m3, fe_cubics_s1_m4,
se = list(rob_se_base[, 2], rob_se_m2[, 2], rob_se_m3[, 2], rob_se_m4[, 2]
),
title = "Applying Polynomial Terms to Stage 1 Models",
align = TRUE,
dep.var.labels = "SPI Overall Score",
column.labels = c("FE Base", "Quad DI", "Quad DI+GDP", "Cubic DI+GDP"),
#covariate.labels = c("SPI", "SPI Squared", "DI", "DI Squared",
#                     "Log GDPpc", "Log GDPpc Squared", "Intercept"),
notes = "All models apply fixed effects. Robust standard errors clustered by country in parentheses",
type = "html",  # Change to "latex" for LaTeX output or "html" for Word
report = "vcs*",  # Shows significance stars and standard errors
model.numbers = FALSE,
keep.stat = c("n", "rsq", "adj.rsq"),
out = "figures/poly_s1_models.html") #saved as html
# AIC/BIC function
source('plm_aic_bic_function.R')
plm_aic_bic(rob_sum_base) # regular FE
plm_aic_bic(rob_sum_m2) # quadratic FE
plm_aic_bic(rob_sum_m3) # quadratic FE
plm_aic_bic(rob_sum_m4) # cubic FE
# Chunk 8
### HYPOTHESES ###
# Interaction 1: DI x GNI Class
# HA: The impact of SPI on SDG performance varies depending on GNI Classification
di_x_inc_lvl <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, 1)*dplyr::lag(income_level_recoded, 1) + cen_log_gdppc,
model = "within",
index = c("country_code", "year"),
data = panel_data,
effect = "twoways")
summary(di_x_inc_lvl, vcov = vcovHC(di_x_inc_lvl, cluster = "group", type = "HC1"))
# Interaction 2: DI x Regime Type (Binary)
# HA: The impact of SPI on SDG performance varies depending on Regime Type (Binary)
di_x_reg_binary <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, 1)*dplyr::lag(autocracy, 1) + cen_log_gdppc,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
summary(di_x_reg_binary, vcov = vcovHC(di_x_reg_binary, cluster = "group", type = "HC1"))
# Interaction 3 DI x Regime Change Episode/Direction
# HA: The impact of SPI on SDG performance varies depending on Regime Change Status/Direction
di_x_reg_eps <- plm(formula = spi_comp ~ dplyr::lag(cen_di_score, 1)*dplyr::lag(aut_ep, 1) + dplyr::lag(cen_di_score, 1)*dplyr::lag(dem_ep, 1) + cen_log_gdppc,
model = "within",
index = c("country_code", "year"),
effect = "twoways",
data = panel_data)
summary(di_x_reg_eps, vcov = vcovHC(di_x_reg_eps, cluster = "group", type = "HC1"))
# Enhanced helper function
tidy_plm_robust <- function(model, model_name) {
tidy_coef <- tidy(model,
conf.int = TRUE,
vcov. = vcovHC(model, cluster = "group", type = "HC1")) %>%
mutate(model = model_name)
# Extract model statistics
model_summary <- summary(model)
tidy_coef %>%
mutate(
adj_r_squared = model_summary$r.squared["adjrsq"]
)
}
# Apply tidy_plm_robust() function to all models
tidy_di_x_inc_lvl    <- tidy_plm_robust(di_x_inc_lvl, "Moderator: DI x Income Level")
tidy_di_x_reg_binary <- tidy_plm_robust(di_x_reg_binary, "Moderator: DI x Regime Type (Binary)")
tidy_di_x_reg_eps  <- tidy_plm_robust(di_x_reg_eps, "Moderator: DI x Regime Change Episode (aut_ep & dem_ep)")
model_n_obs <- tibble(
model = c("Moderator: DI x Income Level", "Moderator: DI x Regime Type Binary",
"Moderator: DI x Regime Change Episode (aut_ep & dem_ep)"),
n_obs = c(nobs(di_x_inc_lvl), nobs(di_x_reg_binary),
nobs(di_x_reg_eps))
)
# Combine all tidy data frames into one
all_models_tidy <- bind_rows(tidy_di_x_inc_lvl,
tidy_di_x_reg_binary,
tidy_di_x_reg_eps) %>%
left_join(model_n_obs, by = "model") %>%
select(model, term, estimate, std.error, p.value, adj_r_squared, n_obs, everything()) %>%
arrange(model, term)
# Save the tidy data frame to a CSV file
write_csv(all_models_tidy, "output_CSVs/fe_s1_interactions.csv")
# extracting robust standard errors for each interaction model
rob_se_di_x_inc_lvl <- coeftest(di_x_inc_lvl, vcov = vcovHC(di_x_inc_lvl, cluster = "group", type = "HC1"))
rob_se_di_x_reg_binary <- coeftest(di_x_reg_binary, vcov = vcovHC(di_x_reg_binary, cluster = "group", type = "HC1"))
rob_se_di_x_reg_eps <- coeftest(di_x_reg_eps, vcov = vcovHC(di_x_reg_eps, cluster = "group", type = "HC1"))
# Create a list of robust standard errors for stargazer
robust_se_list <- list(
rob_se_di_x_inc_lvl[, 2],
rob_se_di_x_reg_binary[, 2],
rob_se_di_x_reg_eps[, 2]
)
stargazer(
di_x_inc_lvl, di_x_reg_binary, di_x_reg_eps,
se = robust_se_list,
type = "html",
out = "figures/fe_s1_interactions.html",
title = "Stage 1: Applying Moderators to Two-Way Fixed Effects Models",
align = TRUE,
dep.var.labels = "SDG Overall",
column.labels = c("DI x Income Level", "DI x Regime Type (Binary: Autocracy)", "DI x Regime Change Episode"),
omit = "factor\\(year\\)",  # Omits year fixed effects from display
model.names = FALSE
)
# Chunk 9
# converting to base R lm() for VIF calculation
ols_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year), data = panel_data) # regular linear model
fe_spi_di <- lm(spi_comp ~ dplyr::lag(di_score, 1) + log_gdppc + income_level_recoded + factor(year) + factor(country_code), data = panel_data)
vif(ols_spi_di)
vif(fe_spi_di)
# Check for multicollinearity using VIF
vif_results <- vif(fe_spi_di)
# Convert VIF results to a data frame for better readability
vif_df <- data.frame(
stage = "Stage 1",
variable = names(vif_results),
VIF = vif_results
)
# APPLY Wooldridge Test for AR(1) Errors in FE Panel Models: pwartest()
# https://search.r-project.org/CRAN/refmans/plm/html/pwartest.html
# This is MUCH BETTER for panel data with small T AND unbalanced panels!!!
pwartest(fe_spi_di_base) # [significant]
# Apply Breusch-Pagan test for heteroskedasticity
bptest(fe_spi_di_base, studentize = TRUE) # Heteroskedasticity [significant]
# Apply Breusch-Pagan test for heteroskedasticity
bptest(fe_spi_di_base, studentize = TRUE) # Heteroskedasticity [significant]
# Apply Breusch-Pagan test for heteroskedasticity
bptest(fe_spi_di_base, studentize = TRUE) # Heteroskedasticity [significant]
formula(fe_spi_di)
# set working directory
setwd("~/Documents/GitHub/QMSS_Thesis_Sanchez")
#load libraries/packages
source("packages.R")
# load data
source("Comp2_panel_wrangling.R")
